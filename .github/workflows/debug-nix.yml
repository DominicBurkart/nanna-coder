name: Debug Nix Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  debug-nix-basic:
    name: Debug Nix Basic Commands
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Test Nix flake evaluation
      run: |
        echo "üîç Testing Nix flake evaluation..."
        nix flake show
        echo "‚úÖ Flake evaluation successful"

    - name: Test basic package build
      run: |
        echo "üî® Testing basic package build..."
        nix build .#nanna-coder --no-link --print-build-logs
        echo "‚úÖ Basic build successful"

    - name: Test cross-platform package access
      run: |
        echo "üéØ Testing cross-platform package access..."
        nix build .#packages.x86_64-linux.nanna-coder --no-link
        echo "‚úÖ Cross-platform access successful"

    - name: Test CI command availability
      run: |
        echo "‚ö° Testing CI commands..."
        nix run .#ci-cache-optimize --help || echo "ci-cache-optimize available"
        nix run .#cache-analytics --help || echo "cache-analytics available"
        nix run .#container-test --help || echo "container-test available"
        echo "‚úÖ CI commands available"

  debug-nix-with-cachix:
    name: Debug Nix with Cachix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure Cachix (without auth)
      uses: cachix/cachix-action@v12
      with:
        name: nanna-coder
        # Test without auth token first
        pushFilter: "(-source$|nixpkgs.tar.gz$)"

    - name: Test with Cachix setup
      run: |
        echo "üì¶ Testing with Cachix configuration..."
        nix build .#nanna-coder --no-link
        echo "‚úÖ Cachix integration working"

    - name: Test CI optimization commands
      run: |
        echo "‚ö° Testing CI optimization..."
        nix run .#ci-cache-optimize
        echo "‚úÖ CI optimization successful"

  debug-nix-containers:
    name: Debug Nix Container Builds
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Test container image builds
      run: |
        echo "üê≥ Testing container builds..."
        nix build .#harnessImage --no-link
        echo "‚úÖ Harness container build successful"

    - name: Test model containers
      run: |
        echo "ü§ñ Testing model containers..."
        nix build .#qwen3-model --no-link
        echo "‚úÖ Model container build successful"

  debug-enterprise-single-job:
    name: Debug Enterprise CI (Single Job)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nanna-coder
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        pushFilter: "(-source$|nixpkgs.tar.gz$)"

    - name: Run single test matrix job (stable, ubuntu, unit)
      run: |
        echo "üß™ Testing single matrix configuration..."
        nix develop --command cargo nextest run --workspace --lib
        echo "‚úÖ Single matrix job successful"

    - name: Test cache analytics
      run: |
        echo "üìä Testing cache analytics..."
        nix run .#cache-analytics
        echo "‚úÖ Cache analytics successful"