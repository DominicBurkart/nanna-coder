name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Pre-build test containers (cached)
      run: |
        echo "ðŸ”„ Building test containers for caching..."
        # Build test containers in parallel for speed
        nix build .#ollama-base .#qwen3-model .#ollama-qwen3 --print-build-logs

        # Load test containers into podman for integration tests
        echo "ðŸ“¦ Loading test containers into podman..."
        podman load -i $(nix build .#ollama-qwen3 --print-out-paths --no-link)/image.tar

        echo "âœ… Test containers ready for integration tests"

    - name: Run tests
      run: nix develop --command cargo test --workspace --verbose

    - name: Run clippy
      run: nix develop --command cargo clippy --workspace --all-targets -- -D warnings

    - name: Check formatting
      run: nix develop --command cargo fmt --all -- --check

    - name: Security audit
      run: nix develop --command cargo audit

    - name: License and dependency check
      run: nix develop --command cargo deny check

    - name: Coverage check
      run: |
        nix develop --command cargo tarpaulin --skip-clean --ignore-tests --output-format text
        nix develop --command cargo tarpaulin --skip-clean --ignore-tests --output-format lcov --output-path coverage.lcov

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        fail_ci_if_error: true

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target: [x86_64-linux, aarch64-linux]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Build workspace
      run: nix build .#packages.${{ matrix.target }}.nanna-coder

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nanna-coder-${{ matrix.target }}
        path: result/bin/*

  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Set up QEMU for cross-platform builds
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build harness container (${{ matrix.arch }})
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          nix build .#harnessImage
        else
          # For aarch64, build cross-compiled version
          nix build .#packages.aarch64-linux.harnessImage || nix build .#harnessImage
        fi

    - name: Load and tag harness image
      run: |
        docker load < result
        ARCH_SUFFIX=""
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          ARCH_SUFFIX="-arm64"
        fi
        docker tag nanna-coder-harness:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/harness:${{ github.sha }}${ARCH_SUFFIX}
        docker tag nanna-coder-harness:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/harness:latest${ARCH_SUFFIX}

    - name: Build ollama container (${{ matrix.arch }})
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          nix build .#ollamaImage
        else
          nix build .#packages.aarch64-linux.ollamaImage || nix build .#ollamaImage
        fi

    - name: Load and tag ollama image
      run: |
        docker load < result
        ARCH_SUFFIX=""
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          ARCH_SUFFIX="-arm64"
        fi
        docker tag nanna-coder-ollama:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ollama:${{ github.sha }}${ARCH_SUFFIX}
        docker tag nanna-coder-ollama:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ollama:latest${ARCH_SUFFIX}

    - name: Push images
      if: github.event_name != 'pull_request'
      run: |
        ARCH_SUFFIX=""
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          ARCH_SUFFIX="-arm64"
        fi
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/harness:${{ github.sha }}${ARCH_SUFFIX}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/harness:latest${ARCH_SUFFIX}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ollama:${{ github.sha }}${ARCH_SUFFIX}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ollama:latest${ARCH_SUFFIX}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-containers
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/harness:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, build-containers]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Build release artifacts
      run: |
        nix build .#packages.x86_64-linux.nanna-coder
        cp result/bin/harness harness-x86_64-linux

        nix build .#packages.aarch64-linux.nanna-coder
        cp result/bin/harness harness-aarch64-linux

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./harness-x86_64-linux
        asset_name: harness-x86_64-linux
        asset_content_type: application/octet-stream

    - name: Upload ARM64 release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./harness-aarch64-linux
        asset_name: harness-aarch64-linux
        asset_content_type: application/octet-stream