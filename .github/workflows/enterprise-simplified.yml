name: Enterprise CI (Simplified)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Start with just the test matrix - most critical functionality
  test-matrix:
    name: ${{ matrix.test-type }} (${{ matrix.rust }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        test-type: [unit, lint]
        include:
          # Add Windows for stable Rust only
          - os: windows-latest
            rust: stable
            test-type: unit
        exclude:
          # Skip lint on macOS for now (to reduce job count)
          - os: macos-latest
            test-type: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      if: runner.os != 'Windows'
      uses: DeterminateSystems/nix-installer-action@main

    - name: Configure Cachix
      if: runner.os != 'Windows'
      uses: cachix/cachix-action@v15
      with:
        name: nanna-coder
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        pushFilter: "(-source$|nixpkgs\\.tar\\.gz$)"
        skipPush: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

    - name: Setup Rust toolchain (Windows/macOS)
      if: runner.os != 'Linux'
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Install additional tools (non-Nix)
      if: runner.os != 'Linux'
      run: |
        cargo install cargo-nextest cargo-audit cargo-deny

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "🐧 Running tests with Nix on Linux..."
          nix develop --command cargo nextest run --workspace --lib
        else
          echo "🖥️ Running tests with Cargo on ${{ runner.os }}..."
          cargo nextest run --workspace --lib
        fi

    - name: Run lint checks
      if: matrix.test-type == 'lint'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "🐧 Running lints with Nix on Linux..."
          nix develop --command cargo clippy --workspace --all-targets -- -D warnings
          nix develop --command cargo fmt --all -- --check
        else
          echo "🖥️ Running lints with Cargo on ${{ runner.os }}..."
          cargo clippy --workspace --all-targets -- -D warnings
          cargo fmt --all -- --check
        fi

  # Simple build test for cross-platform
  build-test:
    name: Build Test (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}
    needs: test-matrix
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-linux
            runner: ubuntu-latest
          - target: x86_64-darwin
            runner: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix (Linux)
      if: runner.os == 'Linux'
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache (Linux)
      if: runner.os == 'Linux'
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure Cachix (Linux)
      if: runner.os == 'Linux' && secrets.CACHIX_AUTH_TOKEN != ''
      uses: cachix/cachix-action@v12
      with:
        name: nanna-coder
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        pushFilter: "(-source$|nixpkgs.tar.gz$)"

    - name: Setup Rust toolchain (macOS)
      if: runner.os == 'macOS'
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Build workspace
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "🐧 Building with Nix..."
          nix build .#nanna-coder --no-link
        else
          echo "🍎 Building with Cargo..."
          cargo build --release
        fi

  # Basic container build (Linux only)
  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [test-matrix]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure Cachix
      if: secrets.CACHIX_AUTH_TOKEN != ''
      uses: cachix/cachix-action@v12
      with:
        name: nanna-coder
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        pushFilter: "(-source$|nixpkgs.tar.gz$)"

    - name: Build harness container
      run: |
        echo "🐳 Building harness container..."
        nix build .#harnessImage --no-link
        echo "✅ Container build successful"

  # CI summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, build-test, build-container]
    if: always()

    steps:
    - name: Generate CI Summary
      run: |
        echo "## 🎯 Enterprise CI Summary (Simplified)" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: Running basic enterprise CI functionality" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Test | ${{ needs.build-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Build | ${{ needs.build-container.result }} |" >> $GITHUB_STEP_SUMMARY

        # Determine overall status
        OVERALL_STATUS="✅ SUCCESS"
        if [[ "${{ needs.test-matrix.result }}" == "failure" || "${{ needs.build-test.result }}" == "failure" || "${{ needs.build-container.result }}" == "failure" ]]; then
          OVERALL_STATUS="❌ FAILURE"
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Overall Status: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY